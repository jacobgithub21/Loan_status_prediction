# -*- coding: utf-8 -*-
"""Loan_status_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HV6BEr91DJ_7s8162n0zSp91yBdUeRxI
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn import metrics
from sklearn.metrics import accuracy_score

data = pd.read_csv('/content/loan')

data.head()

data.shape

data.describe()

data.info()

data.isnull().sum()

sns.heatmap(data.isnull(),yticklabels= False , cbar = True , cmap='viridis')

data['Gender'].fillna(data['Gender'].mode(), inplace = True)

data.tail()

data['Dependents'].value_counts()

from sklearn.preprocessing import LabelEncoder

label = LabelEncoder()

data = data.replace(to_replace='3+', value=4)

data['Dependents'].value_counts()

data.isnull().sum()

data = data.dropna()

data.isnull().sum()

sns.countplot(x = 'Education', hue='Loan_Status', data = data)

sns.countplot(x = 'Married', hue='Loan_Status', data= data)

sns.countplot(x = 'Gender', hue= 'Loan_Status', data=data)

sns.countplot(x = 'Property_Area', hue='Loan_Status', data= data)

data['Loan_Status'] = label.fit_transform(data['Loan_Status'])

data['Loan_Status'].value_counts()

data['Married'] = label.fit_transform(data['Married'])

data['Married'].value_counts()

data['Education']  = label.fit_transform(data['Education'])
data['Self_Employed'] = label.fit_transform(data['Self_Employed'])
data['Property_Area'] = label.fit_transform(data['Property_Area'])
data['Gender']  = label.fit_transform(data['Gender'])

data.head()

x = data.drop(columns=['Loan_Status','Loan_ID'], axis=1)
y = data['Loan_Status']

print(x)
print(y)

x.shape

y.shape

x_train, x_test, y_train, y_test = train_test_split(x , y , test_size =0.1, random_state = 2)

print( x.shape , x_train.shape, x_test.shape)

model = svm.SVC(kernel = 'linear')

model.fit(x_train, y_train)

y_predict = model.predict(x_test)

train = model.predict(x_train)
train_score = accuracy_score(train , y_train)
adj_r2_score = metrics.adjusted_rand_score (train, y_train)
MSE = metrics.mean_squared_error(train, y_train)
MAE = metrics.mean_absolute_error(train, y_train)

print('++++++++++++++  TRAIN_SET_RESULT+++++++++++++')
print('Train_accuracy_score is:', train_score)
print('Adj_R2_score is:',adj_r2_score)
print('mean_squared_error is :', MSE)
print('mean_absolute_error is :', MAE)

test = model.predict(x_test)
test_score = accuracy_score(test , y_test)
adj_r2_score = metrics.adjusted_rand_score (test, y_test)
MSE = metrics.mean_squared_error(test, y_test)
MAE = metrics.mean_absolute_error(test, y_test)

print('++++++++++++++TEST_SET_RESULT+++++++++++++')
print('Test_accuracy_score is:', test_score)
print('Adj_R2_score is:',adj_r2_score)
print('mean_squared_error is :', MSE)
print('mean_absolute_error is :', MAE)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

input_data = [1,	0,	0	,0,	0,	5849,	0.0,	128.0,	360.0,	1.0,	2]
result = np.asarray(input_data)
result_reshape = result.reshape(1,-1)
std = scaler.fit_transform (result_reshape)
print(std)
prediction = model.predict(std)
print(prediction)

if(prediction[0] == 0):
  print('^^^^^^^^^^Customer is  intrested in loan^^^^^^^^^^^ ')
else:
  print('**********Customer is  not intrested in loan********')

